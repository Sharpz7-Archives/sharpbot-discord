# https://aka.ms/yaml

variables:
  PIPENV_HIDE_EMOJIS: 1
  PIPENV_IGNORE_VIRTUALENVS: 1
  PIPENV_NOSPIN: 1
  IMAGE_TAG: "$(Build.Repository.Name):$(Build.SourceBranchName)"
  IMAGE_TAG_CLOUD: "$(username)/$(IMAGE_TAG)"

jobs:

- job: Lint

  pool:
    vmImage: 'Ubuntu 16.04'

  variables:
    PIPENV_CACHE_DIR: ".cache/pipenv"
    PIP_CACHE_DIR: ".cache/pip"
    PIP_SRC: ".cache/src"

  steps:
  - script: sudo apt-get update
    displayName: 'Updating package list'

  - script: sudo apt-get install build-essential curl docker libffi-dev libfreetype6-dev libxml2 libxml2-dev libxslt1-dev zlib1g zlib1g-dev
    displayName: 'Install base dependencies'

  - task: UsePythonVersion@0
    displayName: 'Set Python version'
    inputs:
      versionSpec: '3.7.x'
      addToPath: true

  - script: pip install flake8
    displayName: 'Install flake8'

  - script: python -m flake8
    displayName: 'Run linter'

- job: build

  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - script: |
      docker login -u $username -p $password

      test="$(docker pull $(IMAGE_TAG_CLOUD))"
      echo $?
      if [ $? -eq 0 ]; then
        docker tag $(IMAGE_TAG_CLOUD) $(IMAGE_TAG)
      else
        docker pull $(username)/$(Build.Repository.Name):master
        docker tag $(username)/$(Build.Repository.Name):master $(IMAGE_TAG)
      fi
    displayName: "docker pull"

  - script: |
      docker build --cache-from $(IMAGE_TAG) -f "Dockerfile" -t ${IMAGE_TAG} .
      docker tag $(IMAGE_TAG) $(IMAGE_TAG_CLOUD)
    displayName: "docker build"

  - script: |
      docker push $(IMAGE_TAG_CLOUD)
    displayName: "docker push"

- job: Tests

  dependsOn: "Build"

  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - script: |
      docker login -u $(username) -p $(password)
      docker pull $(IMAGE_TAG_CLOUD)
      docker tag $(IMAGE_TAG_CLOUD) $(Build.Repository.Name):master
    displayName: "docker pull"

  - script: |
      touch .env
      echo "CICD=TRUE" > .env
    displayName: "setup enviroment"

  - script: |
      docker-compose up --abort-on-container-exit
    displayName: "run tests"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: './project/bot_testing/artifacts'
      artifactName: Test Output

